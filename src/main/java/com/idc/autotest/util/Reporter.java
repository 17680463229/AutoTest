package com.idc.autotest.util;

import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.testng.ITestResult;
import org.testng.annotations.Test;

/**
 * This class is used for test methods to log messages that will be included in
 * the HTML reports generated by TestNG. <br>
 * <br>
 * <b>Implementation details.</b> <br>
 * <br>
 * The reporter keeps a combined output of strings (in m_output) and also a
 * record of which method output which line. In order to do this, callers
 * specify what the current method is with setCurrentTestResult() and the
 * Reporter maintains a mapping of each test result with a list of integers.
 * These integers are indices in the combined output (avoids duplicating the
 * output).
 *
 * Created on Nov 2, 2005
 *
 * @author cbeust
 */
public class Reporter {
    private static boolean isContiRunning = false;

    public static boolean isContiRunning() {
        return isContiRunning;
    }

    public static void setContiRunning(boolean isContiRunning) {
        Reporter.isContiRunning = isContiRunning;
    }

    // add
    private static ThreadLocal<String> m_currentTestName = new InheritableThreadLocal<>();
    // 每个case容忍3次http请求失败
    private static ThreadLocal<Integer> m_currentTestHttpIllegalNum = new InheritableThreadLocal<>();

    /**
     * 设置唯一标志
     *
     * @param
     */
    public static void setCurrentTestName() {
        m_currentTestName.set(getThreadMess());
        m_currentTestHttpIllegalNum.set(3);
    }

    /**
     * add
     *
     * @return the current test name.
     */
    private static String getCurrentTestName() {
        return m_currentTestName.get();
    }

    /**
     * m_currentTestHttpIllegalNum --
     */
    public static void setCurrentTestHttpIllegalNum(int num) {
        m_currentTestHttpIllegalNum.set(num);
    }

    public static Integer getCurrentTestHttpIllegalNum() {
        return m_currentTestHttpIllegalNum.get();
    }

    /**
     * 返回当前线程的调用链路 class/method/discription
     *
     * @return
     * @throws SecurityException
     * @throws NoSuchMethodException
     */
    private static String getThreadMess() {
        String result = "";
        StackTraceElement[] stackTraceElement = Thread.currentThread().getStackTrace();
        for (StackTraceElement ele : stackTraceElement) {
            String className = ele.getClassName();
            if (className.contains("com.ais") && className.contains("Test")) {
                Class<?> clazz = null;
                try {
                    clazz = Class.forName(className);
                } catch (ClassNotFoundException e1) {
                    e1.printStackTrace();
                }
                String methodName = ele.getMethodName();
                Method method = null;
                try {
                    method = clazz.getMethod(methodName, new Class[] {});
                } catch (NoSuchMethodException e) {
                    e.printStackTrace();
                } catch (SecurityException e) {
                    e.printStackTrace();
                }
                String discrip = method.getAnnotation(Test.class).description();
                result = String.format("%s/%s/%s", className, methodName, discrip);
                break;
            }
        }
        return result;
    }

    // when tests are run in parallel, each thread may be working with different
    // 'current test result'. Also, this value should be inherited if the test
    // code
    // spawns its own thread.
    private static ThreadLocal<ITestResult> m_currentTestResult = new InheritableThreadLocal<>();

    public static void setCurrentTestResult(ITestResult m) {
        m_currentTestResult.set(m);
    }

    public static List<String> getOutput() {
        return org.testng.Reporter.getOutput();
    }

    /**
     * Erase the content of all the output generated so far.
     */
    public static void clear() {
        org.testng.Reporter.clear();
    }

    /**
     * @param escapeHtml If true, use HTML entities for special HTML characters
     *        (<, >, &, ...).
     */
    public static void setEscapeHtml(boolean escapeHtml) {
        org.testng.Reporter.setEscapeHtml(escapeHtml);
    }

    /**
     * Log the passed string to the HTML reports
     *
     * @param s The message to log
     */
    public static void log(String s) {
        if (isContiRunning) {
            s = String.format("[%s]%s %s", Reporter.getCurrentTestName(), Reporter.getTimeNow(), s);
        }
        org.testng.Reporter.log(s);
    }

    /**
     * add
     *
     * @param s
     */
    public static void log(String firstMess, String s) {
        String sTmp = s;
        if (isContiRunning) {
            sTmp = String.format("[%s][%s]%s %s", firstMess, Reporter.getCurrentTestName(), Reporter.getTimeNow(), s);
        }
        org.testng.Reporter.log(sTmp);
    }

    /**
     * Log the passed string to the HTML reports if the current verbosity is
     * equal or greater than the one passed in parameter. If logToStandardOut is
     * true, the string will also be printed on standard out.
     *
     * @param s The message to log
     * @param level The verbosity of this message
     * @param logToStandardOut Whether to print this string on standard out too
     */
    public static void log(String s, int level, boolean logToStandardOut) {
        if (isContiRunning) {
            s = String.format("[%s]%s %s", Reporter.getCurrentTestName(), Reporter.getTimeNow(), s);
        }
        org.testng.Reporter.log(s, level, logToStandardOut);
    }

    /**
     * Log the passed string to the HTML reports. If logToStandardOut is true,
     * the string will also be printed on standard out.
     *
     * @param s The message to log
     * @param logToStandardOut Whether to print this string on standard out too
     */
    public static void log(String firstMess, String s, boolean logToStandardOut) {
        if (isContiRunning) {
            s = String.format("[%s][%s]%s %s", firstMess, Reporter.getCurrentTestName(), Reporter.getTimeNow(), s);
        }
        org.testng.Reporter.log(s, logToStandardOut);
    }

    /**
     * add
     *
     * Log the passed string to the HTML reports. If logToStandardOut is true,
     * the string will also be printed on standard out.
     *
     * @param s The message to log
     * @param logToStandardOut Whether to print this string on standard out too
     */
    public static void log(String s, boolean logToStandardOut) {
        if (isContiRunning) {
            s = String.format("[%s]%s %s", Reporter.getCurrentTestName(), Reporter.getTimeNow(), s);
        }
        org.testng.Reporter.log(s, logToStandardOut);
    }

    /**
     * Log the passed string to the HTML reports if the current verbosity is
     * equal or greater than the one passed in parameter
     *
     * @param s The message to log
     * @param level The verbosity of this message
     */
    public static void log(String s, int level) {
        if (isContiRunning) {
            s = String.format("[%s]%s %s", Reporter.getCurrentTestName(), Reporter.getTimeNow(), s);
        }
        org.testng.Reporter.log(s, level);
    }

    /**
     * @return the current test result.
     */
    public static ITestResult getCurrentTestResult() {
        return org.testng.Reporter.getCurrentTestResult();
    }

    public static synchronized List<String> getOutput(ITestResult tr) {
        return org.testng.Reporter.getOutput(tr);
    }

    // 鸡肋
    private static String getTimeNow() {
        String result = null;
        SimpleDateFormat df_t = new SimpleDateFormat("MM_dd_HH_mm");// 设置日期格式
        result = df_t.format(new Date());
        return result;
    }
}
